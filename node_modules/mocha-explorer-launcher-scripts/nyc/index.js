"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const path = require("path");
const child_process_1 = require("child_process");
const vscode_test_adapter_remoting_util_1 = require("vscode-test-adapter-remoting-util");
process.once('message', (workerArgs) => __awaiter(void 0, void 0, void 0, function* () {
    process.chdir(workerArgs.cwd);
    if ((workerArgs.action === 'runTests') && !workerArgs.debuggerPort) {
        const ipcOpts = {
            role: 'client',
            port: parseInt(process.env['NYC_PORT'] || '8123'),
            host: 'localhost'
        };
        const nycPath = path.resolve(workerArgs.cwd, process.env['NYC_PATH'] || "node_modules/.bin/nyc");
        const nycReporter = process.env['NYC_REPORTER'] || 'lcov';
        (0, child_process_1.spawn)(nycPath, [
            `--reporter=${nycReporter}`,
            process.execPath,
            workerArgs.workerScript,
            JSON.stringify(ipcOpts)
        ], { stdio: 'inherit' });
        const socket = yield (0, vscode_test_adapter_remoting_util_1.receiveConnection)(ipcOpts.port);
        (0, vscode_test_adapter_remoting_util_1.writeMessage)(socket, workerArgs);
        (0, vscode_test_adapter_remoting_util_1.readMessages)(socket, msg => process.send(msg));
    }
    else {
        const execArgv = workerArgs.debuggerPort ? [`--inspect-brk=${workerArgs.debuggerPort}`] : [];
        const childProc = (0, child_process_1.fork)(workerArgs.workerScript, [], { execArgv, stdio: 'inherit' });
        childProc.send(workerArgs);
        childProc.on('message', msg => process.send(msg));
    }
}));
