"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const child_process_1 = require("child_process");
const fs_1 = require("fs");
const util_1 = require("util");
const vscode_test_adapter_remoting_util_1 = require("vscode-test-adapter-remoting-util");
(function () {
    const log = (msg) => process.send(msg);
    const remoteHost = process.env['SSH_HOST'];
    if (!remoteHost) {
        log('No remote host configured - please set the SSH_HOST environment variable');
        return;
    }
    const remoteUser = process.env['SSH_USER'];
    const destination = remoteUser ? `${remoteUser}@${remoteHost}` : remoteHost;
    const localWorkspace = process.env['VSCODE_WORKSPACE_PATH'] || process.cwd();
    ;
    const remoteWorkspace = process.env['SSH_WORKSPACE_PATH'];
    if (!remoteWorkspace) {
        log('No remote workspace path configured - please set the SSH_WORKSPACE_PATH environment variable');
        return;
    }
    let port;
    try {
        port = +(process.env['SSH_WORKER_PORT'] || 8123);
    }
    catch (_a) {
        log(`Couldn't parse SSH_WORKER_PORT: "${process.env['SSH_WORKER_PORT']}" is not a number.`);
        return;
    }
    const localToRemotePath = (path) => (0, vscode_test_adapter_remoting_util_1.convertPath)(path, localWorkspace, remoteWorkspace);
    const remoteToLocalPath = (path) => (0, vscode_test_adapter_remoting_util_1.convertPath)(path, remoteWorkspace, localWorkspace);
    process.once('message', (origWorkerArgs) => __awaiter(this, void 0, void 0, function* () {
        log('Received workerArgs');
        const workerArgs = vscode_test_adapter_remoting_util_1.mochaWorker.convertWorkerArgs(origWorkerArgs, localToRemotePath);
        let nodeDebugArgs = [];
        let sshDebugArgs = [];
        if (workerArgs.debuggerPort) {
            nodeDebugArgs = [`--inspect-brk=${workerArgs.debuggerPort}`];
            sshDebugArgs = ['-L', `${workerArgs.debuggerPort}:localhost:${workerArgs.debuggerPort}`];
        }
        log('Syncing workspace');
        const rsyncOutput = (0, child_process_1.execSync)(`rsync -r ${localWorkspace}/ ${destination}:${remoteWorkspace}`);
        log(`Output from rsync: ${rsyncOutput.toString()}`);
        log('Starting worker via ssh');
        const childProcess = (0, child_process_1.spawn)('ssh', [
            destination,
            '-R', `${port}:localhost:${port}`,
            ...sshDebugArgs,
            'node',
            ...nodeDebugArgs,
            '-',
            JSON.stringify(`{"role":"client","port":${port}}`)
        ], { stdio: ['pipe', 'inherit', 'inherit'] });
        childProcess.on('error', err => log(`Error from ssh: ${(0, util_1.inspect)(err)}`));
        childProcess.on('exit', (code, signal) => {
            log(`The ssh process exited with code ${code} and signal ${signal}.`);
            if ((workerArgs.action === 'loadTests') && (code || signal)) {
                process.send({
                    type: 'finished',
                    errorMessage: `The ssh process exited with code ${code} and signal ${signal}.\nThe diagnostic log may contain more information, enable it with the "mochaExplorer.logpanel" or "mochaExplorer.logfile" settings.`
                });
            }
        });
        log('Sending worker script');
        childProcess.stdin.write((0, fs_1.readFileSync)(origWorkerArgs.workerScript), () => log('Finished sending worker script'));
        childProcess.stdin.end();
        log('Waiting for worker process to connect');
        const socket = yield (0, vscode_test_adapter_remoting_util_1.receiveConnection)(port);
        log('Sending workerArgs to worker process');
        yield (0, vscode_test_adapter_remoting_util_1.writeMessage)(socket, workerArgs);
        log('Finished initialising worker');
        (0, vscode_test_adapter_remoting_util_1.readMessages)(socket, (msg) => {
            if (workerArgs.action === 'loadTests') {
                process.send(vscode_test_adapter_remoting_util_1.mochaWorker.convertTestLoadMessage(msg, remoteToLocalPath));
            }
            else {
                process.send(vscode_test_adapter_remoting_util_1.mochaWorker.convertTestRunMessage(msg, remoteToLocalPath));
            }
        });
    }));
})();
