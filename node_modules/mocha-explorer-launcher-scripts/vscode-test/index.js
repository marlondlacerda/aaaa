"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const util = require("util");
const test_electron_1 = require("@vscode/test-electron");
(function () {
    return __awaiter(this, void 0, void 0, function* () {
        try {
            const ipcOpts = JSON.parse(process.argv[2]);
            const extensionDevelopmentPath = process.env['VSCODE_WORKSPACE_PATH'];
            const extensionTestsPath = require.resolve('./runMochaWorker');
            const version = process.env['VSCODE_VERSION'];
            let launchArgs;
            if (process.env['VSCODE_LAUNCH_ARGS']) {
                launchArgs = JSON.parse(process.env['VSCODE_LAUNCH_ARGS']);
            }
            yield (0, test_electron_1.runTests)({
                extensionDevelopmentPath,
                extensionTestsPath,
                version,
                launchArgs,
                extensionTestsEnv: {
                    MOCHA_WORKER_IPC_ROLE: ipcOpts.role,
                    MOCHA_WORKER_IPC_PORT: String(ipcOpts.port),
                    MOCHA_WORKER_IPC_HOST: ipcOpts.host
                }
            });
        }
        catch (err) {
            console.error(`Failed to run tests: ${util.inspect(err)}`);
            process.exit(1);
        }
    });
})();
