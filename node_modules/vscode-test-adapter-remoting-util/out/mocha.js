"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.convertTestRunMessage = exports.convertTestLoadMessage = exports.receiveTestRunMessages = exports.receiveTestLoadMessages = exports.convertWorkerArgs = void 0;
const common_1 = require("./common");
const ipc_1 = require("./ipc");
/**
 * Convert all paths in a `WorkerArgs` object using the given `convertPath` function
 */
function convertWorkerArgs(workerArgs, convertPath) {
    return Object.assign(Object.assign({}, workerArgs), { cwd: convertPath(workerArgs.cwd), testFiles: workerArgs.testFiles.map(convertPath), mochaPath: workerArgs.mochaPath ? convertPath(workerArgs.mochaPath) : undefined });
}
exports.convertWorkerArgs = convertWorkerArgs;
/**
 * This is a typed version of `readMessages` for receiving the worker protocol messages when loading the tests
 */
function receiveTestLoadMessages(socket, handler) {
    ipc_1.readMessages(socket, handler);
}
exports.receiveTestLoadMessages = receiveTestLoadMessages;
/**
 * This is a typed version of `readMessages` for receiving the worker protocol messages when running the tests
 */
function receiveTestRunMessages(socket, handler) {
    ipc_1.readMessages(socket, handler);
}
exports.receiveTestRunMessages = receiveTestRunMessages;
/**
 * Convert all paths in worker protocol messages when loading the tests using the given `convertPath` function
 */
function convertTestLoadMessage(msg, convertPath) {
    if ((typeof msg === 'object') && msg && (msg.type === 'suite')) {
        return common_1.convertInfo(msg, convertPath);
    }
    else {
        return msg;
    }
}
exports.convertTestLoadMessage = convertTestLoadMessage;
/**
 * Convert all paths in worker protocol messages when running the tests using the given `convertPath` function
 */
function convertTestRunMessage(msg, convertPath) {
    if (typeof msg === 'string') {
        return msg;
    }
    if (msg.type === 'suite') {
        if (typeof msg.suite === 'object') {
            return Object.assign(Object.assign({}, msg), { suite: common_1.convertInfo(msg.suite, convertPath) });
        }
    }
    else if (msg.type === 'test') {
        if (typeof msg.test === 'object') {
            return Object.assign(Object.assign({}, msg), { test: common_1.convertInfo(msg.test, convertPath) });
        }
    }
    return msg;
}
exports.convertTestRunMessage = convertTestRunMessage;
//# sourceMappingURL=mocha.js.map